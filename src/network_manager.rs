// This code was autogenerated with dbus-codegen-rust, see https://github.com/diwic/dbus-rs

use dbus as dbus;
use dbus::arg;

pub trait OrgFreedesktopDBusProperties {
    type Err;
    fn get(&self, interface_name: &str, property_name: &str) -> Result<arg::Variant<Box<arg::RefArg>>, Self::Err>;
    fn get_all(&self, interface_name: &str) -> Result<::std::collections::HashMap<String, arg::Variant<Box<arg::RefArg>>>, Self::Err>;
    fn set(&self, interface_name: &str, property_name: &str, value: arg::Variant<Box<arg::RefArg>>) -> Result<(), Self::Err>;
}

impl<'a, C: ::std::ops::Deref<Target=dbus::Connection>> OrgFreedesktopDBusProperties for dbus::ConnPath<'a, C> {
    type Err = dbus::Error;

    fn get(&self, interface_name: &str, property_name: &str) -> Result<arg::Variant<Box<arg::RefArg>>, Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.DBus.Properties".into(), &"Get".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(interface_name);
            i.append(property_name);
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let value: arg::Variant<Box<arg::RefArg>> = try!(i.read());
        Ok(value)
    }

    fn get_all(&self, interface_name: &str) -> Result<::std::collections::HashMap<String, arg::Variant<Box<arg::RefArg>>>, Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.DBus.Properties".into(), &"GetAll".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(interface_name);
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let properties: ::std::collections::HashMap<String, arg::Variant<Box<arg::RefArg>>> = try!(i.read());
        Ok(properties)
    }

    fn set(&self, interface_name: &str, property_name: &str, value: arg::Variant<Box<arg::RefArg>>) -> Result<(), Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.DBus.Properties".into(), &"Set".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(interface_name);
            i.append(property_name);
            i.append(value);
        }));
        try!(m.as_result());
        Ok(())
    }
}

#[derive(Debug, Default)]
pub struct OrgFreedesktopDBusPropertiesPropertiesChanged {
    pub interface_name: String,
    pub changed_properties: ::std::collections::HashMap<String, arg::Variant<Box<arg::RefArg>>>,
    pub invalidated_properties: Vec<String>,
}

impl dbus::SignalArgs for OrgFreedesktopDBusPropertiesPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.DBus.Properties";
    fn append(&self, i: &mut arg::IterAppend) {
        (&self.interface_name as &arg::RefArg).append(i);
        (&self.changed_properties as &arg::RefArg).append(i);
        (&self.invalidated_properties as &arg::RefArg).append(i);
    }
    fn get(&mut self, i: &mut arg::Iter) -> Result<(), arg::TypeMismatchError> {
        self.interface_name = try!(i.read());
        self.changed_properties = try!(i.read());
        self.invalidated_properties = try!(i.read());
        Ok(())
    }
}

pub trait OrgFreedesktopDBusIntrospectable {
    type Err;
    fn introspect(&self) -> Result<String, Self::Err>;
}

impl<'a, C: ::std::ops::Deref<Target=dbus::Connection>> OrgFreedesktopDBusIntrospectable for dbus::ConnPath<'a, C> {
    type Err = dbus::Error;

    fn introspect(&self) -> Result<String, Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.DBus.Introspectable".into(), &"Introspect".into(), |_| {
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let xml_data: String = try!(i.read());
        Ok(xml_data)
    }
}

pub trait OrgFreedesktopDBusPeer {
    type Err;
    fn ping(&self) -> Result<(), Self::Err>;
    fn get_machine_id(&self) -> Result<String, Self::Err>;
}

impl<'a, C: ::std::ops::Deref<Target=dbus::Connection>> OrgFreedesktopDBusPeer for dbus::ConnPath<'a, C> {
    type Err = dbus::Error;

    fn ping(&self) -> Result<(), Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.DBus.Peer".into(), &"Ping".into(), |_| {
        }));
        try!(m.as_result());
        Ok(())
    }

    fn get_machine_id(&self) -> Result<String, Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.DBus.Peer".into(), &"GetMachineId".into(), |_| {
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let machine_uuid: String = try!(i.read());
        Ok(machine_uuid)
    }
}

pub trait OrgFreedesktopNetworkManager {
    type Err;
    fn reload(&self, flags: u32) -> Result<(), Self::Err>;
    fn get_devices(&self) -> Result<Vec<dbus::Path<'static>>, Self::Err>;
    fn get_all_devices(&self) -> Result<Vec<dbus::Path<'static>>, Self::Err>;
    fn get_device_by_ip_iface(&self, iface: &str) -> Result<dbus::Path<'static>, Self::Err>;
    fn activate_connection(&self, connection: dbus::Path, device: dbus::Path, specific_object: dbus::Path) -> Result<dbus::Path<'static>, Self::Err>;
    fn add_and_activate_connection(&self, connection: ::std::collections::HashMap<&str, ::std::collections::HashMap<&str, arg::Variant<Box<arg::RefArg>>>>, device: dbus::Path, specific_object: dbus::Path) -> Result<(dbus::Path<'static>, dbus::Path<'static>), Self::Err>;
    fn deactivate_connection(&self, active_connection: dbus::Path) -> Result<(), Self::Err>;
    fn sleep(&self, sleep: bool) -> Result<(), Self::Err>;
    fn enable(&self, enable: bool) -> Result<(), Self::Err>;
    fn get_permissions(&self) -> Result<::std::collections::HashMap<String, String>, Self::Err>;
    fn set_logging(&self, level: &str, domains: &str) -> Result<(), Self::Err>;
    fn get_logging(&self) -> Result<(String, String), Self::Err>;
    fn check_connectivity(&self) -> Result<u32, Self::Err>;
    fn state(&self) -> Result<u32, Self::Err>;
    fn checkpoint_create(&self, devices: Vec<dbus::Path>, rollback_timeout: u32, flags: u32) -> Result<dbus::Path<'static>, Self::Err>;
    fn checkpoint_destroy(&self, checkpoint: dbus::Path) -> Result<(), Self::Err>;
    fn checkpoint_rollback(&self, checkpoint: dbus::Path) -> Result<::std::collections::HashMap<String, u32>, Self::Err>;
    //fn get_devices(&self) -> Result<Vec<dbus::Path<'static>>, Self::Err>;
    //fn get_all_devices(&self) -> Result<Vec<dbus::Path<'static>>, Self::Err>;
    fn get_networking_enabled(&self) -> Result<bool, Self::Err>;
    fn get_wireless_enabled(&self) -> Result<bool, Self::Err>;
    fn set_wireless_enabled(&self, value: bool) -> Result<(), Self::Err>;
    fn get_wireless_hardware_enabled(&self) -> Result<bool, Self::Err>;
    fn get_wwan_enabled(&self) -> Result<bool, Self::Err>;
    fn set_wwan_enabled(&self, value: bool) -> Result<(), Self::Err>;
    fn get_wwan_hardware_enabled(&self) -> Result<bool, Self::Err>;
    fn get_wimax_enabled(&self) -> Result<bool, Self::Err>;
    fn set_wimax_enabled(&self, value: bool) -> Result<(), Self::Err>;
    fn get_wimax_hardware_enabled(&self) -> Result<bool, Self::Err>;
    fn get_active_connections(&self) -> Result<Vec<dbus::Path<'static>>, Self::Err>;
    fn get_primary_connection(&self) -> Result<dbus::Path<'static>, Self::Err>;
    fn get_primary_connection_type(&self) -> Result<String, Self::Err>;
    fn get_metered(&self) -> Result<u32, Self::Err>;
    fn get_activating_connection(&self) -> Result<dbus::Path<'static>, Self::Err>;
    fn get_startup(&self) -> Result<bool, Self::Err>;
    fn get_version(&self) -> Result<String, Self::Err>;
    fn get_capabilities(&self) -> Result<Vec<u32>, Self::Err>;
    fn get_state(&self) -> Result<u32, Self::Err>;
    fn get_connectivity(&self) -> Result<u32, Self::Err>;
    fn get_connectivity_check_available(&self) -> Result<bool, Self::Err>;
    fn get_connectivity_check_enabled(&self) -> Result<bool, Self::Err>;
    fn set_connectivity_check_enabled(&self, value: bool) -> Result<(), Self::Err>;
    fn get_global_dns_configuration(&self) -> Result<::std::collections::HashMap<String, arg::Variant<Box<arg::RefArg>>>, Self::Err>;
    fn set_global_dns_configuration(&self, value: ::std::collections::HashMap<String, arg::Variant<Box<arg::RefArg>>>) -> Result<(), Self::Err>;
}

impl<'a, C: ::std::ops::Deref<Target=dbus::Connection>> OrgFreedesktopNetworkManager for dbus::ConnPath<'a, C> {
    type Err = dbus::Error;

    fn reload(&self, flags: u32) -> Result<(), Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.NetworkManager".into(), &"Reload".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(flags);
        }));
        try!(m.as_result());
        Ok(())
    }

    fn get_devices(&self) -> Result<Vec<dbus::Path<'static>>, Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.NetworkManager".into(), &"GetDevices".into(), |_| {
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let devices: Vec<dbus::Path<'static>> = try!(i.read());
        Ok(devices)
    }

    fn get_all_devices(&self) -> Result<Vec<dbus::Path<'static>>, Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.NetworkManager".into(), &"GetAllDevices".into(), |_| {
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let devices: Vec<dbus::Path<'static>> = try!(i.read());
        Ok(devices)
    }

    fn get_device_by_ip_iface(&self, iface: &str) -> Result<dbus::Path<'static>, Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.NetworkManager".into(), &"GetDeviceByIpIface".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(iface);
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let device: dbus::Path<'static> = try!(i.read());
        Ok(device)
    }

    fn activate_connection(&self, connection: dbus::Path, device: dbus::Path, specific_object: dbus::Path) -> Result<dbus::Path<'static>, Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.NetworkManager".into(), &"ActivateConnection".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(connection);
            i.append(device);
            i.append(specific_object);
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let active_connection: dbus::Path<'static> = try!(i.read());
        Ok(active_connection)
    }

    fn add_and_activate_connection(&self, connection: ::std::collections::HashMap<&str, ::std::collections::HashMap<&str, arg::Variant<Box<arg::RefArg>>>>, device: dbus::Path, specific_object: dbus::Path) -> Result<(dbus::Path<'static>, dbus::Path<'static>), Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.NetworkManager".into(), &"AddAndActivateConnection".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(connection);
            i.append(device);
            i.append(specific_object);
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let path: dbus::Path<'static> = try!(i.read());
        let active_connection: dbus::Path<'static> = try!(i.read());
        Ok((path, active_connection))
    }

    fn deactivate_connection(&self, active_connection: dbus::Path) -> Result<(), Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.NetworkManager".into(), &"DeactivateConnection".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(active_connection);
        }));
        try!(m.as_result());
        Ok(())
    }

    fn sleep(&self, sleep: bool) -> Result<(), Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.NetworkManager".into(), &"Sleep".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(sleep);
        }));
        try!(m.as_result());
        Ok(())
    }

    fn enable(&self, enable: bool) -> Result<(), Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.NetworkManager".into(), &"Enable".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(enable);
        }));
        try!(m.as_result());
        Ok(())
    }

    fn get_permissions(&self) -> Result<::std::collections::HashMap<String, String>, Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.NetworkManager".into(), &"GetPermissions".into(), |_| {
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let permissions: ::std::collections::HashMap<String, String> = try!(i.read());
        Ok(permissions)
    }

    fn set_logging(&self, level: &str, domains: &str) -> Result<(), Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.NetworkManager".into(), &"SetLogging".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(level);
            i.append(domains);
        }));
        try!(m.as_result());
        Ok(())
    }

    fn get_logging(&self) -> Result<(String, String), Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.NetworkManager".into(), &"GetLogging".into(), |_| {
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let level: String = try!(i.read());
        let domains: String = try!(i.read());
        Ok((level, domains))
    }

    fn check_connectivity(&self) -> Result<u32, Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.NetworkManager".into(), &"CheckConnectivity".into(), |_| {
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let connectivity: u32 = try!(i.read());
        Ok(connectivity)
    }

    fn state(&self) -> Result<u32, Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.NetworkManager".into(), &"state".into(), |_| {
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let state: u32 = try!(i.read());
        Ok(state)
    }

    fn checkpoint_create(&self, devices: Vec<dbus::Path>, rollback_timeout: u32, flags: u32) -> Result<dbus::Path<'static>, Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.NetworkManager".into(), &"CheckpointCreate".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(devices);
            i.append(rollback_timeout);
            i.append(flags);
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let checkpoint: dbus::Path<'static> = try!(i.read());
        Ok(checkpoint)
    }

    fn checkpoint_destroy(&self, checkpoint: dbus::Path) -> Result<(), Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.NetworkManager".into(), &"CheckpointDestroy".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(checkpoint);
        }));
        try!(m.as_result());
        Ok(())
    }

    fn checkpoint_rollback(&self, checkpoint: dbus::Path) -> Result<::std::collections::HashMap<String, u32>, Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.NetworkManager".into(), &"CheckpointRollback".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(checkpoint);
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let result: ::std::collections::HashMap<String, u32> = try!(i.read());
        Ok(result)
    }

    /*
    fn get_devices(&self) -> Result<Vec<dbus::Path<'static>>, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager", "Devices")
    }
    */
    
    /*
    fn get_all_devices(&self) -> Result<Vec<dbus::Path<'static>>, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager", "AllDevices")
    }
    */

    fn get_networking_enabled(&self) -> Result<bool, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager", "NetworkingEnabled")
    }

    fn get_wireless_enabled(&self) -> Result<bool, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager", "WirelessEnabled")
    }

    fn get_wireless_hardware_enabled(&self) -> Result<bool, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager", "WirelessHardwareEnabled")
    }

    fn get_wwan_enabled(&self) -> Result<bool, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager", "WwanEnabled")
    }

    fn get_wwan_hardware_enabled(&self) -> Result<bool, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager", "WwanHardwareEnabled")
    }

    fn get_wimax_enabled(&self) -> Result<bool, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager", "WimaxEnabled")
    }

    fn get_wimax_hardware_enabled(&self) -> Result<bool, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager", "WimaxHardwareEnabled")
    }

    fn get_active_connections(&self) -> Result<Vec<dbus::Path<'static>>, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager", "ActiveConnections")
    }

    fn get_primary_connection(&self) -> Result<dbus::Path<'static>, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager", "PrimaryConnection")
    }

    fn get_primary_connection_type(&self) -> Result<String, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager", "PrimaryConnectionType")
    }

    fn get_metered(&self) -> Result<u32, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager", "Metered")
    }

    fn get_activating_connection(&self) -> Result<dbus::Path<'static>, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager", "ActivatingConnection")
    }

    fn get_startup(&self) -> Result<bool, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager", "Startup")
    }

    fn get_version(&self) -> Result<String, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager", "Version")
    }

    fn get_capabilities(&self) -> Result<Vec<u32>, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager", "Capabilities")
    }

    fn get_state(&self) -> Result<u32, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager", "State")
    }

    fn get_connectivity(&self) -> Result<u32, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager", "Connectivity")
    }

    fn get_connectivity_check_available(&self) -> Result<bool, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager", "ConnectivityCheckAvailable")
    }

    fn get_connectivity_check_enabled(&self) -> Result<bool, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager", "ConnectivityCheckEnabled")
    }

    fn get_global_dns_configuration(&self) -> Result<::std::collections::HashMap<String, arg::Variant<Box<arg::RefArg>>>, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager", "GlobalDnsConfiguration")
    }

    fn set_wireless_enabled(&self, value: bool) -> Result<(), Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::set(&self, "org.freedesktop.NetworkManager", "WirelessEnabled", value)
    }

    fn set_wwan_enabled(&self, value: bool) -> Result<(), Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::set(&self, "org.freedesktop.NetworkManager", "WwanEnabled", value)
    }

    fn set_wimax_enabled(&self, value: bool) -> Result<(), Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::set(&self, "org.freedesktop.NetworkManager", "WimaxEnabled", value)
    }

    fn set_connectivity_check_enabled(&self, value: bool) -> Result<(), Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::set(&self, "org.freedesktop.NetworkManager", "ConnectivityCheckEnabled", value)
    }

    fn set_global_dns_configuration(&self, value: ::std::collections::HashMap<String, arg::Variant<Box<arg::RefArg>>>) -> Result<(), Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::set(&self, "org.freedesktop.NetworkManager", "GlobalDnsConfiguration", value)
    }
}

#[derive(Debug, Default)]
pub struct OrgFreedesktopNetworkManagerCheckPermissions {
}

impl dbus::SignalArgs for OrgFreedesktopNetworkManagerCheckPermissions {
    const NAME: &'static str = "CheckPermissions";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager";
    fn append(&self, _: &mut arg::IterAppend) {
    }
    fn get(&mut self, _: &mut arg::Iter) -> Result<(), arg::TypeMismatchError> {
        Ok(())
    }
}

#[derive(Debug, Default)]
pub struct OrgFreedesktopNetworkManagerStateChanged {
    pub state: u32,
}

impl dbus::SignalArgs for OrgFreedesktopNetworkManagerStateChanged {
    const NAME: &'static str = "StateChanged";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager";
    fn append(&self, i: &mut arg::IterAppend) {
        (&self.state as &arg::RefArg).append(i);
    }
    fn get(&mut self, i: &mut arg::Iter) -> Result<(), arg::TypeMismatchError> {
        self.state = try!(i.read());
        Ok(())
    }
}

#[derive(Debug, Default)]
pub struct OrgFreedesktopNetworkManagerPropertiesChanged {
    pub properties: ::std::collections::HashMap<String, arg::Variant<Box<arg::RefArg>>>,
}

impl dbus::SignalArgs for OrgFreedesktopNetworkManagerPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager";
    fn append(&self, i: &mut arg::IterAppend) {
        (&self.properties as &arg::RefArg).append(i);
    }
    fn get(&mut self, i: &mut arg::Iter) -> Result<(), arg::TypeMismatchError> {
        self.properties = try!(i.read());
        Ok(())
    }
}

#[derive(Debug, Default)]
pub struct OrgFreedesktopNetworkManagerDeviceAdded {
    pub device_path: dbus::Path<'static>,
}

impl dbus::SignalArgs for OrgFreedesktopNetworkManagerDeviceAdded {
    const NAME: &'static str = "DeviceAdded";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager";
    fn append(&self, i: &mut arg::IterAppend) {
        (&self.device_path as &arg::RefArg).append(i);
    }
    fn get(&mut self, i: &mut arg::Iter) -> Result<(), arg::TypeMismatchError> {
        self.device_path = try!(i.read());
        Ok(())
    }
}

#[derive(Debug, Default)]
pub struct OrgFreedesktopNetworkManagerDeviceRemoved {
    pub device_path: dbus::Path<'static>,
}

impl dbus::SignalArgs for OrgFreedesktopNetworkManagerDeviceRemoved {
    const NAME: &'static str = "DeviceRemoved";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager";
    fn append(&self, i: &mut arg::IterAppend) {
        (&self.device_path as &arg::RefArg).append(i);
    }
    fn get(&mut self, i: &mut arg::Iter) -> Result<(), arg::TypeMismatchError> {
        self.device_path = try!(i.read());
        Ok(())
    }
}
