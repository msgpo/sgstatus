// This code was autogenerated with dbus-codegen-rust, see https://github.com/diwic/dbus-rs

use dbus as dbus;
use dbus::arg;

pub trait OrgFreedesktopDBusProperties {
    type Err;
    fn get(&self, interface_name: &str, property_name: &str) -> Result<arg::Variant<Box<arg::RefArg>>, Self::Err>;
    fn get_all(&self, interface_name: &str) -> Result<::std::collections::HashMap<String, arg::Variant<Box<arg::RefArg>>>, Self::Err>;
    fn set(&self, interface_name: &str, property_name: &str, value: arg::Variant<Box<arg::RefArg>>) -> Result<(), Self::Err>;
}

impl<'a, C: ::std::ops::Deref<Target=dbus::Connection>> OrgFreedesktopDBusProperties for dbus::ConnPath<'a, C> {
    type Err = dbus::Error;

    fn get(&self, interface_name: &str, property_name: &str) -> Result<arg::Variant<Box<arg::RefArg>>, Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.DBus.Properties".into(), &"Get".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(interface_name);
            i.append(property_name);
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let value: arg::Variant<Box<arg::RefArg>> = try!(i.read());
        Ok(value)
    }

    fn get_all(&self, interface_name: &str) -> Result<::std::collections::HashMap<String, arg::Variant<Box<arg::RefArg>>>, Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.DBus.Properties".into(), &"GetAll".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(interface_name);
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let properties: ::std::collections::HashMap<String, arg::Variant<Box<arg::RefArg>>> = try!(i.read());
        Ok(properties)
    }

    fn set(&self, interface_name: &str, property_name: &str, value: arg::Variant<Box<arg::RefArg>>) -> Result<(), Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.DBus.Properties".into(), &"Set".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(interface_name);
            i.append(property_name);
            i.append(value);
        }));
        try!(m.as_result());
        Ok(())
    }
}

#[derive(Debug, Default)]
pub struct OrgFreedesktopDBusPropertiesPropertiesChanged {
    pub interface_name: String,
    pub changed_properties: ::std::collections::HashMap<String, arg::Variant<Box<arg::RefArg>>>,
    pub invalidated_properties: Vec<String>,
}

impl dbus::SignalArgs for OrgFreedesktopDBusPropertiesPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.DBus.Properties";
    fn append(&self, i: &mut arg::IterAppend) {
        (&self.interface_name as &arg::RefArg).append(i);
        (&self.changed_properties as &arg::RefArg).append(i);
        (&self.invalidated_properties as &arg::RefArg).append(i);
    }
    fn get(&mut self, i: &mut arg::Iter) -> Result<(), arg::TypeMismatchError> {
        self.interface_name = try!(i.read());
        self.changed_properties = try!(i.read());
        self.invalidated_properties = try!(i.read());
        Ok(())
    }
}

pub trait OrgFreedesktopDBusIntrospectable {
    type Err;
    fn introspect(&self) -> Result<String, Self::Err>;
}

impl<'a, C: ::std::ops::Deref<Target=dbus::Connection>> OrgFreedesktopDBusIntrospectable for dbus::ConnPath<'a, C> {
    type Err = dbus::Error;

    fn introspect(&self) -> Result<String, Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.DBus.Introspectable".into(), &"Introspect".into(), |_| {
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let xml_data: String = try!(i.read());
        Ok(xml_data)
    }
}

pub trait OrgFreedesktopDBusPeer {
    type Err;
    fn ping(&self) -> Result<(), Self::Err>;
    fn get_machine_id(&self) -> Result<String, Self::Err>;
}

impl<'a, C: ::std::ops::Deref<Target=dbus::Connection>> OrgFreedesktopDBusPeer for dbus::ConnPath<'a, C> {
    type Err = dbus::Error;

    fn ping(&self) -> Result<(), Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.DBus.Peer".into(), &"Ping".into(), |_| {
        }));
        try!(m.as_result());
        Ok(())
    }

    fn get_machine_id(&self) -> Result<String, Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.DBus.Peer".into(), &"GetMachineId".into(), |_| {
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let machine_uuid: String = try!(i.read());
        Ok(machine_uuid)
    }
}

pub trait OrgFreedesktopUPowerDevice {
    type Err;
    fn refresh(&self) -> Result<(), Self::Err>;
    fn get_history(&self, type_arg: &str, timespan: u32, resolution: u32) -> Result<Vec<(u32, f64, u32)>, Self::Err>;
    fn get_statistics(&self, type_arg: &str) -> Result<Vec<(f64, f64)>, Self::Err>;
    fn get_native_path(&self) -> Result<String, Self::Err>;
    fn get_vendor(&self) -> Result<String, Self::Err>;
    fn get_model(&self) -> Result<String, Self::Err>;
    fn get_serial(&self) -> Result<String, Self::Err>;
    fn get_update_time(&self) -> Result<u64, Self::Err>;
    fn get_type(&self) -> Result<u32, Self::Err>;
    fn get_power_supply(&self) -> Result<bool, Self::Err>;
    fn get_has_history(&self) -> Result<bool, Self::Err>;
    fn get_has_statistics(&self) -> Result<bool, Self::Err>;
    fn get_online(&self) -> Result<bool, Self::Err>;
    fn get_energy(&self) -> Result<f64, Self::Err>;
    fn get_energy_empty(&self) -> Result<f64, Self::Err>;
    fn get_energy_full(&self) -> Result<f64, Self::Err>;
    fn get_energy_full_design(&self) -> Result<f64, Self::Err>;
    fn get_energy_rate(&self) -> Result<f64, Self::Err>;
    fn get_voltage(&self) -> Result<f64, Self::Err>;
    fn get_luminosity(&self) -> Result<f64, Self::Err>;
    fn get_time_to_empty(&self) -> Result<i64, Self::Err>;
    fn get_time_to_full(&self) -> Result<i64, Self::Err>;
    fn get_percentage(&self) -> Result<f64, Self::Err>;
    fn get_temperature(&self) -> Result<f64, Self::Err>;
    fn get_is_present(&self) -> Result<bool, Self::Err>;
    fn get_state(&self) -> Result<u32, Self::Err>;
    fn get_is_rechargeable(&self) -> Result<bool, Self::Err>;
    fn get_capacity(&self) -> Result<f64, Self::Err>;
    fn get_technology(&self) -> Result<u32, Self::Err>;
    fn get_warning_level(&self) -> Result<u32, Self::Err>;
    fn get_battery_level(&self) -> Result<u32, Self::Err>;
    fn get_icon_name(&self) -> Result<String, Self::Err>;
}

impl<'a, C: ::std::ops::Deref<Target=dbus::Connection>> OrgFreedesktopUPowerDevice for dbus::ConnPath<'a, C> {
    type Err = dbus::Error;

    fn refresh(&self) -> Result<(), Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.UPower.Device".into(), &"Refresh".into(), |_| {
        }));
        try!(m.as_result());
        Ok(())
    }

    fn get_history(&self, type_arg: &str, timespan: u32, resolution: u32) -> Result<Vec<(u32, f64, u32)>, Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.UPower.Device".into(), &"GetHistory".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(type_arg);
            i.append(timespan);
            i.append(resolution);
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let data: Vec<(u32, f64, u32)> = try!(i.read());
        Ok(data)
    }

    fn get_statistics(&self, type_arg: &str) -> Result<Vec<(f64, f64)>, Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.UPower.Device".into(), &"GetStatistics".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(type_arg);
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let data: Vec<(f64, f64)> = try!(i.read());
        Ok(data)
    }

    fn get_native_path(&self) -> Result<String, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "NativePath")
    }

    fn get_vendor(&self) -> Result<String, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "Vendor")
    }

    fn get_model(&self) -> Result<String, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "Model")
    }

    fn get_serial(&self) -> Result<String, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "Serial")
    }

    fn get_update_time(&self) -> Result<u64, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "UpdateTime")
    }

    fn get_type(&self) -> Result<u32, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "Type")
    }

    fn get_power_supply(&self) -> Result<bool, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "PowerSupply")
    }

    fn get_has_history(&self) -> Result<bool, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "HasHistory")
    }

    fn get_has_statistics(&self) -> Result<bool, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "HasStatistics")
    }

    fn get_online(&self) -> Result<bool, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "Online")
    }

    fn get_energy(&self) -> Result<f64, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "Energy")
    }

    fn get_energy_empty(&self) -> Result<f64, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "EnergyEmpty")
    }

    fn get_energy_full(&self) -> Result<f64, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "EnergyFull")
    }

    fn get_energy_full_design(&self) -> Result<f64, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "EnergyFullDesign")
    }

    fn get_energy_rate(&self) -> Result<f64, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "EnergyRate")
    }

    fn get_voltage(&self) -> Result<f64, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "Voltage")
    }

    fn get_luminosity(&self) -> Result<f64, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "Luminosity")
    }

    fn get_time_to_empty(&self) -> Result<i64, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "TimeToEmpty")
    }

    fn get_time_to_full(&self) -> Result<i64, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "TimeToFull")
    }

    fn get_percentage(&self) -> Result<f64, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "Percentage")
    }

    fn get_temperature(&self) -> Result<f64, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "Temperature")
    }

    fn get_is_present(&self) -> Result<bool, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "IsPresent")
    }

    fn get_state(&self) -> Result<u32, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "State")
    }

    fn get_is_rechargeable(&self) -> Result<bool, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "IsRechargeable")
    }

    fn get_capacity(&self) -> Result<f64, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "Capacity")
    }

    fn get_technology(&self) -> Result<u32, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "Technology")
    }

    fn get_warning_level(&self) -> Result<u32, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "WarningLevel")
    }

    fn get_battery_level(&self) -> Result<u32, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "BatteryLevel")
    }

    fn get_icon_name(&self) -> Result<String, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UPower.Device", "IconName")
    }
}
