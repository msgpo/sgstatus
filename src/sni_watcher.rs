// This code was autogenerated with dbus-codegen-rust, see https://github.com/diwic/dbus-rs

#![allow(dead_code)]
use dbus as dbus;
use dbus::arg;
use dbus::tree;

pub trait OrgFreedesktopStatusNotifierWatcher {
    type Err;
    fn register_status_notifier_item(&self, service: &str) -> Result<(), Self::Err>;
    fn register_status_notifier_host(&self, service: &str) -> Result<(), Self::Err>;
    fn get_protocol_version(&self) -> Result<i32, Self::Err>;
    fn get_is_status_notifier_host_registered(&self) -> Result<bool, Self::Err>;
    fn get_registered_status_notifier_items(&self) -> Result<Vec<String>, Self::Err>;
}

impl<'a, C: ::std::ops::Deref<Target=dbus::Connection>> OrgFreedesktopStatusNotifierWatcher for dbus::ConnPath<'a, C> {
    type Err = dbus::Error;

    fn register_status_notifier_item(&self, service: &str) -> Result<(), Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.StatusNotifierWatcher".into(), &"RegisterStatusNotifierItem".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(service);
        }));
        try!(m.as_result());
        Ok(())
    }

    fn register_status_notifier_host(&self, service: &str) -> Result<(), Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.StatusNotifierWatcher".into(), &"RegisterStatusNotifierHost".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(service);
        }));
        try!(m.as_result());
        Ok(())
    }

    fn get_protocol_version(&self) -> Result<i32, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.StatusNotifierWatcher", "ProtocolVersion")
    }

    fn get_is_status_notifier_host_registered(&self) -> Result<bool, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.StatusNotifierWatcher", "IsStatusNotifierHostRegistered")
    }

    fn get_registered_status_notifier_items(&self) -> Result<Vec<String>, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.StatusNotifierWatcher", "RegisteredStatusNotifierItems")
    }
}

pub fn org_freedesktop_status_notifier_watcher_server<F, T, D>(factory: &tree::Factory<tree::MTFn<D>, D>, data: D::Interface, f: F) -> tree::Interface<tree::MTFn<D>, D>
where
    D: tree::DataType,
    D::Method: Default,
    D::Property: Default,
    T: OrgFreedesktopStatusNotifierWatcher<Err=tree::MethodErr>,
    F: 'static + for <'z> Fn(& 'z tree::MethodInfo<tree::MTFn<D>, D>) -> & 'z T,
{
    let i = factory.interface("org.freedesktop.StatusNotifierWatcher", data);
    let f = ::std::sync::Arc::new(f);
    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let service: &str = try!(i.read());
        let d = fclone(minfo);
        try!(d.register_status_notifier_item(service));
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("RegisterStatusNotifierItem", Default::default(), h);
    let m = m.in_arg(("service", "s"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let service: &str = try!(i.read());
        let d = fclone(minfo);
        try!(d.register_status_notifier_host(service));
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("RegisterStatusNotifierHost", Default::default(), h);
    let m = m.in_arg(("service", "s"));
    let i = i.add_m(m);

    let p = factory.property::<i32, _>("ProtocolVersion", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(try!(d.get_protocol_version()));
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<bool, _>("IsStatusNotifierHostRegistered", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(try!(d.get_is_status_notifier_host_registered()));
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<Vec<&str>, _>("RegisteredStatusNotifierItems", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(try!(d.get_registered_status_notifier_items()));
        Ok(())
    });
    let i = i.add_p(p);
    i
}

#[derive(Debug, Default)]
pub struct OrgFreedesktopStatusNotifierWatcherStatusNotifierItemRegistered {
    pub service: String,
}

impl dbus::SignalArgs for OrgFreedesktopStatusNotifierWatcherStatusNotifierItemRegistered {
    const NAME: &'static str = "StatusNotifierItemRegistered";
    const INTERFACE: &'static str = "org.freedesktop.StatusNotifierWatcher";
    fn append(&self, i: &mut arg::IterAppend) {
        (&self.service as &arg::RefArg).append(i);
    }
    fn get(&mut self, i: &mut arg::Iter) -> Result<(), arg::TypeMismatchError> {
        self.service = try!(i.read());
        Ok(())
    }
}

#[derive(Debug, Default)]
pub struct OrgFreedesktopStatusNotifierWatcherStatusNotifierItemUnregistered {
    pub service: String,
}

impl dbus::SignalArgs for OrgFreedesktopStatusNotifierWatcherStatusNotifierItemUnregistered {
    const NAME: &'static str = "StatusNotifierItemUnregistered";
    const INTERFACE: &'static str = "org.freedesktop.StatusNotifierWatcher";
    fn append(&self, i: &mut arg::IterAppend) {
        (&self.service as &arg::RefArg).append(i);
    }
    fn get(&mut self, i: &mut arg::Iter) -> Result<(), arg::TypeMismatchError> {
        self.service = try!(i.read());
        Ok(())
    }
}

#[derive(Debug, Default)]
pub struct OrgFreedesktopStatusNotifierWatcherStatusNotifierHostRegistered {
}

impl dbus::SignalArgs for OrgFreedesktopStatusNotifierWatcherStatusNotifierHostRegistered {
    const NAME: &'static str = "StatusNotifierHostRegistered";
    const INTERFACE: &'static str = "org.freedesktop.StatusNotifierWatcher";
    fn append(&self, _: &mut arg::IterAppend) {
    }
    fn get(&mut self, _: &mut arg::Iter) -> Result<(), arg::TypeMismatchError> {
        Ok(())
    }
}
